import { ConfigManager } from '../config.js';
import { OTLPFull } from '../full/otlp-full.js';

async function testFullLoading() {
  console.log('üß™ Testing Full Loading...');

  // Test 1: –û—Ç–∫–ª—é—á–µ–Ω–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
  const config = ConfigManager.getInstance();
  config.setConfig({ enabled: false, serviceName: 'test-service-full' });

  const otlpDisabled = new OTLPFull();

  if (otlpDisabled.isReady()) {
    throw new Error('OTLP should not be ready when disabled');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ no-op
  otlpDisabled.startSpan('test-span');
  otlpDisabled.addAttribute('key', 'value');
  otlpDisabled.endSpan(true);

  console.log('‚úÖ Disabled telemetry full loading test passed');

  // Test 2: –í–∫–ª—é—á–µ–Ω–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
  config.setConfig({
    enabled: true,
    serviceName: 'test-service-full',
    debug: true,
    endpoint: 'http://localhost:9999/v1/traces'
  });

  const otlpEnabled = new OTLPFull();

  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  await new Promise(resolve => setTimeout(resolve, 100));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('OTLP Ready:', otlpEnabled.isReady());

  otlpEnabled.startSpan('test-span-full');
  otlpEnabled.addAttribute('test-key', 'test-value');
  otlpEnabled.endSpan(true);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º shutdown
  await otlpEnabled.shutdown();
  console.log('‚úÖ Full loading with enabled telemetry test passed');

  console.log('üéâ All Full Loading tests passed!\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testFullLoading().catch(console.error);