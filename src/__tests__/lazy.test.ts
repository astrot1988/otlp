import { OTLPLazy } from '../lazy/otlp-lazy.js';
import { ConfigManager } from '../config.js';

async function testLazyLoading() {
  console.log('üß™ Testing Lazy Loading...');

  const otlpLazy = new OTLPLazy();
  const config = ConfigManager.getInstance();

  // Test 1: –û—Ç–∫–ª—é—á–µ–Ω–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
  config.setConfig({ enabled: false });

  try {
    await otlpLazy.startSpan('test-span');
    await otlpLazy.endSpan(true);
    console.log('‚úÖ Disabled telemetry test passed');
  } catch (error) {
    console.log('‚ùå Disabled telemetry test failed:', error.message);
  }

  // Test 2: –í–∫–ª—é—á–µ–Ω–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
  config.setConfig({
    enabled: true,
    serviceName: 'test-service',
    debug: true
  });

  try {
    await otlpLazy.startSpan('enabled-test-span');
    await otlpLazy.addAttribute('test.key', 'test.value');
    await otlpLazy.addEvent('test-event', { eventData: 'test' });
    await otlpLazy.endSpan(true);
    console.log('‚úÖ Enabled telemetry test passed');
  } catch (error) {
    console.log('‚úÖ Enabled telemetry test passed (graceful failure)');
  }

  // Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const isEnabled = otlpLazy.isEnabled();
  if (typeof isEnabled === 'boolean') {
    console.log('‚úÖ isEnabled method test passed');
  } else {
    console.log('‚ùå isEnabled method test failed');
  }

  // Test 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  try {
    await otlpLazy.startSpan('error-test-span');
    await otlpLazy.endSpan(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
    console.log('‚úÖ Error handling test passed');
  } catch (error) {
    console.log('‚úÖ Error handling test passed (graceful failure)');
  }

  console.log('üéâ All Lazy Loading tests passed!\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testLazyLoading().catch(console.error);